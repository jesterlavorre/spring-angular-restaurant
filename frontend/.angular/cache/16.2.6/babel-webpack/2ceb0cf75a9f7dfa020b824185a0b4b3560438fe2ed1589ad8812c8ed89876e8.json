{"ast":null,"code":"import { User } from '../models/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class BackendService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.selectedTable = {};\n    this.order = [];\n    this.activeUser = new User('', '', '', '', '', '', '', '', '', '', '', '', '', '', '');\n    this.currentRestaurantBeingViewedId = '';\n    this.waiterWorkAtRestaurant = '';\n  }\n  updateUser(newUser) {\n    return this.http.put('http://localhost:8080/controller/update-user', newUser);\n  }\n  getHomeData() {\n    return this.http.get('http://localhost:8080/controller/home-page');\n  }\n  login(username, password, userType) {\n    const data = {\n      u: username,\n      p: password,\n      t: userType\n    };\n    console.log('ovo je pozvi na bek ' + username);\n    console.log('ovo je pozvi na bek ' + password);\n    console.log('ovo je pozvi na bek ' + userType);\n    return this.http.post('http://localhost:8080/controller/login', data);\n  }\n  getUserByEmailOrUsername(email, username) {\n    return this.http.get('http://localhost:8080/controller/user-exists?param1=' + email + '&param2=' + username);\n  }\n  createUser(newUser) {\n    return this.http.post('http://localhost:8080/controller/new-user', newUser);\n  }\n  changePassword(username, newPassword) {\n    const data = {\n      username: username,\n      newPassword: newPassword\n    };\n    return this.http.post('http://localhost:8080/controller/change-password', data);\n  }\n  getRestaurantInfo(id) {\n    return this.http.get('http://localhost:8080/controller/restaurant-info-comments?param=' + id);\n  }\n  makeReservation(reser) {\n    return this.http.post('http://localhost:8080/controller/make-reservation', reser);\n  }\n  getDished(restId) {\n    return this.http.get('http://localhost:8080/controller/all-dishes?restaurantId=' + restId);\n  }\n  makeOrder(order) {\n    return this.http.post('http://localhost:8080/controller/make-order', order);\n  }\n  getReservationView(username) {\n    return this.http.get('http://localhost:8080/controller/user-reservations?username=' + username);\n  }\n  getAllDeliveries(username) {\n    return this.http.get('http://localhost:8080/controller/delivery-view?username=' + username);\n  }\n  getAllWaiterReservations(username) {\n    return this.http.get('http://localhost:8080/controller/waiter-reservations?username=' + username);\n  }\n  confirmReservation(reservationId, username, status, denyReason) {\n    // String restaurantId;\n    // String username;\n    // String denyReason;\n    const data = {\n      reservatioId: reservationId,\n      username: username,\n      denyReason: denyReason,\n      status: status\n    };\n    return this.http.post('http://localhost:8080/controller/waiter-confirm-reservation', data);\n  }\n  getWorksAtRestaurant(username) {\n    return this.http.get('http://localhost:8080/controller/works-at-restaurant?username=' + username);\n  }\n  updateLayout(restaurantId, layout, tablesSelected) {\n    const data = {\n      restaurantId: restaurantId,\n      layout: layout,\n      tablesSelected: tablesSelected\n    };\n    return this.http.post('http://localhost:8080/controller/update-layout', data);\n  }\n  getOrdersForRestaurantWaiter(restaurantId) {\n    return this.http.get('http://localhost:8080/controller/waiter-delivery-orders?restaurantId=' + restaurantId);\n  }\n  updateOrderStatusWaiter(status, estimatedDelivery, orderId) {\n    // String status;\n    // String estimatedDelivery;\n    // String orderId;\n    const data = {\n      status: status,\n      estimatedDelivery: estimatedDelivery,\n      orderId: orderId\n    };\n    return this.http.post('http://localhost:8080/controller/update-order-waiter', data);\n  }\n  getDiagrams(username, restaurantId) {\n    return this.http.get('http://localhost:8080/controller/diagrams?restaurantId=' + restaurantId + '&username=' + username);\n  }\n  getAdminData() {\n    return this.http.get('http://localhost:8080/controller/admin-data');\n  }\n  updateUserStatus(userId, status) {\n    const data = {\n      userId: userId,\n      status: status\n    };\n    return this.http.post('http://localhost:8080/controller/update-user-status', data);\n  }\n  editUserData(user) {\n    // const data = {\n    //   entity: user,\n    // };\n    return this.http.post('http://localhost:8080/controller/edit-user-data', user);\n  }\n  editRestaurantData(res) {\n    return this.http.post('http://localhost:8080/controller/edit-restaurant-admin', res);\n  }\n  insertNewRestaurant(res) {\n    return this.http.post('http://localhost:8080/controller/insert-restaurant', res);\n  }\n  linkWaiterRestaurant(waiterId, restaurantId) {\n    // String waiterId;\n    // String restaurantId;\n    // link-waiter-restaurant\n    const data = {\n      waiterId: waiterId,\n      restaurantId: restaurantId\n    };\n    return this.http.post('http://localhost:8080/controller/link-waiter-restaurant', data);\n  }\n  static #_ = this.ɵfac = function BackendService_Factory(t) {\n    return new (t || BackendService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendService,\n    factory: BackendService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["User","BackendService","constructor","http","router","selectedTable","order","activeUser","currentRestaurantBeingViewedId","waiterWorkAtRestaurant","updateUser","newUser","put","getHomeData","get","login","username","password","userType","data","u","p","t","console","log","post","getUserByEmailOrUsername","email","createUser","changePassword","newPassword","getRestaurantInfo","id","makeReservation","reser","getDished","restId","makeOrder","getReservationView","getAllDeliveries","getAllWaiterReservations","confirmReservation","reservationId","status","denyReason","reservatioId","getWorksAtRestaurant","updateLayout","restaurantId","layout","tablesSelected","getOrdersForRestaurantWaiter","updateOrderStatusWaiter","estimatedDelivery","orderId","getDiagrams","getAdminData","updateUserStatus","userId","editUserData","user","editRestaurantData","res","insertNewRestaurant","linkWaiterRestaurant","waiterId","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["d:\\Users\\Admin\\Desktop\\PIA\\2023-24\\projekat\\sveze skinuti pocetni\\frontend\\src\\app\\services\\backend.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from '../models/User';\nimport { Home } from '../models/Home';\nimport { RestaurantInfo } from '../models/RestaurantInfo';\nimport { Reservation } from '../models/Reservation';\nimport { BasicResponse } from '../models/BasicResponse';\nimport { Dishes } from '../models/Dishes';\nimport { Order } from '../models/Order';\nimport { ReservationsView } from '../models/ReservationsView';\nimport { DeliveryView } from '../models/DeliveryView';\nimport { ReservationsWaiter } from '../models/ReservationsWaiter';\nimport { WorksAtRestaurant } from '../models/WorksAtRestaurant';\nimport { DeliveryOrdersWaiter } from '../models/DeliveryOrdersWaiter';\nimport { Diagrams } from '../models/Diagrams';\nimport { AdminData } from '../models/AdminData';\nimport { UsersForAdmin } from '../models/UsersForAdmin';\nimport { RestaurantsForAdmin } from '../models/RestaurantsForAdmin';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BackendService {\n  constructor(private http: HttpClient, private router: Router) {}\n  selectedTable: { [reservationId: string]: string } = {};\n  order: Order[] = [];\n  activeUser: User = new User(\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    '',\n    ''\n  );\n  homeData: Home | undefined;\n\n  currentRestaurantBeingViewedId: string = '';\n\n  waiterWorkAtRestaurant: string = '';\n\n  updateUser(newUser: User) {\n    return this.http.put<User>(\n      'http://localhost:8080/controller/update-user',\n      newUser\n    );\n  }\n\n  getHomeData() {\n    return this.http.get<Home>('http://localhost:8080/controller/home-page');\n  }\n  login(username: string, password: string, userType: string) {\n    const data = {\n      u: username,\n      p: password,\n      t: userType,\n    };\n    console.log('ovo je pozvi na bek ' + username);\n    console.log('ovo je pozvi na bek ' + password);\n    console.log('ovo je pozvi na bek ' + userType);\n    return this.http.post<User>('http://localhost:8080/controller/login', data);\n  }\n\n  getUserByEmailOrUsername(email: string, username: string) {\n    return this.http.get<User>(\n      'http://localhost:8080/controller/user-exists?param1=' +\n        email +\n        '&param2=' +\n        username\n    );\n  }\n\n  createUser(newUser: User) {\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/new-user',\n      newUser\n    );\n  }\n\n  changePassword(username: string, newPassword: string) {\n    const data = {\n      username: username,\n      newPassword: newPassword,\n    };\n    return this.http.post<User>(\n      'http://localhost:8080/controller/change-password',\n      data\n    );\n  }\n\n  getRestaurantInfo(id: string) {\n    return this.http.get<RestaurantInfo>(\n      'http://localhost:8080/controller/restaurant-info-comments?param=' + id\n    );\n  }\n\n  makeReservation(reser: Reservation) {\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/make-reservation',\n      reser\n    );\n  }\n  getDished(restId: string) {\n    return this.http.get<Dishes[]>(\n      'http://localhost:8080/controller/all-dishes?restaurantId=' + restId\n    );\n  }\n\n  makeOrder(order: Order[]) {\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/make-order',\n      order\n    );\n  }\n\n  getReservationView(username: string) {\n    return this.http.get<ReservationsView>(\n      'http://localhost:8080/controller/user-reservations?username=' + username\n    );\n  }\n  getAllDeliveries(username: string) {\n    return this.http.get<DeliveryView[]>(\n      'http://localhost:8080/controller/delivery-view?username=' + username\n    );\n  }\n  getAllWaiterReservations(username: string) {\n    return this.http.get<ReservationsWaiter[]>(\n      'http://localhost:8080/controller/waiter-reservations?username=' +\n        username\n    );\n  }\n\n  confirmReservation(\n    reservationId: string,\n    username: string,\n    status: string,\n    denyReason: string\n  ) {\n    // String restaurantId;\n    // String username;\n    // String denyReason;\n    const data = {\n      reservatioId: reservationId,\n      username: username,\n      denyReason: denyReason,\n      status: status,\n    };\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/waiter-confirm-reservation',\n      data\n    );\n  }\n\n  getWorksAtRestaurant(username: string) {\n    return this.http.get<WorksAtRestaurant>(\n      'http://localhost:8080/controller/works-at-restaurant?username=' +\n        username\n    );\n  }\n  updateLayout(restaurantId: string, layout: string, tablesSelected: string) {\n    const data = {\n      restaurantId: restaurantId,\n      layout: layout,\n      tablesSelected: tablesSelected,\n    };\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/update-layout',\n      data\n    );\n  }\n\n  getOrdersForRestaurantWaiter(restaurantId: string) {\n    return this.http.get<DeliveryOrdersWaiter[]>(\n      'http://localhost:8080/controller/waiter-delivery-orders?restaurantId=' +\n        restaurantId\n    );\n  }\n  updateOrderStatusWaiter(\n    status: string,\n    estimatedDelivery: string,\n    orderId: string\n  ) {\n    // String status;\n    // String estimatedDelivery;\n    // String orderId;\n    const data = {\n      status: status,\n      estimatedDelivery: estimatedDelivery,\n      orderId: orderId,\n    };\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/update-order-waiter',\n      data\n    );\n  }\n\n  getDiagrams(username: string, restaurantId: string) {\n    return this.http.get<Diagrams>(\n      'http://localhost:8080/controller/diagrams?restaurantId=' +\n        restaurantId +\n        '&username=' +\n        username\n    );\n  }\n\n  getAdminData() {\n    return this.http.get<AdminData>(\n      'http://localhost:8080/controller/admin-data'\n    );\n  }\n  updateUserStatus(userId: string, status: string) {\n    const data = {\n      userId: userId,\n      status: status,\n    };\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/update-user-status',\n      data\n    );\n  }\n  editUserData(user: UsersForAdmin) {\n    // const data = {\n    //   entity: user,\n    // };\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/edit-user-data',\n      user\n    );\n  }\n  editRestaurantData(res: RestaurantsForAdmin) {\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/edit-restaurant-admin',\n      res\n    );\n  }\n\n  insertNewRestaurant(res: any) {\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/insert-restaurant',\n      res\n    );\n  }\n\n  linkWaiterRestaurant(waiterId: string, restaurantId: string) {\n    // String waiterId;\n    // String restaurantId;\n    // link-waiter-restaurant\n    const data = {\n      waiterId: waiterId,\n      restaurantId: restaurantId,\n    };\n    return this.http.post<BasicResponse>(\n      'http://localhost:8080/controller/link-waiter-restaurant',\n      data\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}